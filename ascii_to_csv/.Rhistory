#     print(gene_row_name)
#   }
# }
}
for (cluster_name in names(pt27_ne_nested)) {
# print(cluster_name) # these are the number of clusters per bootstrap
cluster_objects <- pt27_ne_nested[[cluster_name]]
print(cluster_objects) # 10 cluster objects, each of class Seurat
# print(class(cluster_objects)) # they are all lists...
# 12697 features = genes
# # Iterate through the inner list, which contains Seurat objects for a cluster
# c = 0 # counter, this is for naming
# for (cluster_obj in cluster_objects) {
#   c = c + 1 # iterate counter
#   # Seurat function GetAssayData
#   counts_data <- GetAssayData(cluster_obj, assay = "RNA", slot = "counts")
#   # print(counts_data) # row = gene, barcode col = counts
#
#   # now iterate through each gene row
#   for (gene_row_index in 1:10) {
#     # gene_names <- rownames(GetAssayData(cluster_object, assay = "RNA", slot = "counts"))
#     gene_row_name <- rownames(counts_data[gene_row_index])
#     print(gene_row_name)
#   }
# }
}
for (cluster_name in names(pt27_ne_nested)) {
# print(cluster_name) # these are the number of clusters per bootstrap
cluster_objects <- pt27_ne_nested[[cluster_name]]
print(cluster_objects) # 10 cluster objects, each of class Seurat
print(class(cluster_objects)) # they are all lists...
# 12697 features = genes
# # Iterate through the inner list, which contains Seurat objects for a cluster
# c = 0 # counter, this is for naming
# for (cluster_obj in cluster_objects) {
#   c = c + 1 # iterate counter
#   # Seurat function GetAssayData
#   counts_data <- GetAssayData(cluster_obj, assay = "RNA", slot = "counts")
#   # print(counts_data) # row = gene, barcode col = counts
#
#   # now iterate through each gene row
#   for (gene_row_index in 1:10) {
#     # gene_names <- rownames(GetAssayData(cluster_object, assay = "RNA", slot = "counts"))
#     gene_row_name <- rownames(counts_data[gene_row_index])
#     print(gene_row_name)
#   }
# }
}
for (cluster_name in names(pt27_ne_nested)) {
# print(cluster_name) # these are the number of clusters per bootstrap
cluster_objects <- pt27_ne_nested[[cluster_name]]
print(cluster_objects) # 10 cluster objects, each of class Seurat
print(class(cluster_objects[[1]])) # they are all lists...
# 12697 features = genes
# # Iterate through the inner list, which contains Seurat objects for a cluster
# c = 0 # counter, this is for naming
# for (cluster_obj in cluster_objects) {
#   c = c + 1 # iterate counter
#   # Seurat function GetAssayData
#   counts_data <- GetAssayData(cluster_obj, assay = "RNA", slot = "counts")
#   # print(counts_data) # row = gene, barcode col = counts
#
#   # now iterate through each gene row
#   for (gene_row_index in 1:10) {
#     # gene_names <- rownames(GetAssayData(cluster_object, assay = "RNA", slot = "counts"))
#     gene_row_name <- rownames(counts_data[gene_row_index])
#     print(gene_row_name)
#   }
# }
}
for (seurat_object in cluster_objects) {
print(class(seurat_object))
}
for (cluster_name in names(pt27_ne_nested)) {
# print(cluster_name) # these are the number of clusters per bootstrap
cluster_objects <- pt27_ne_nested[[cluster_name]]
print(cluster_objects) # 10 cluster objects, each of class Seurat
print(class(cluster_objects[[1]])) # they are all lists...to access the obj have to index in
print(length(cluster_objects))
# 12697 features = genes
}
for (cluster_name in names(pt27_ne_nested)) {
# print(cluster_name) # these are the number of clusters per bootstrap
cluster_objects <- pt27_ne_nested[[cluster_name]]
print(cluster_objects) # 10 cluster objects, each of class Seurat
print(class(cluster_objects[[1]])) # they are all lists...to access the obj have to index in
paste("length:", length(cluster_objects))
# 12697 features = genes
}
# For each gene we make the tree
print(names(pt27_ne_nested))
library(tidyverse)
#install.packages("tibble")
library(tibble)
#install.packages("gsubfn")
library(gsubfn)
#install.packages("dendextend")
library(dendextend)
library(Seurat)
library(hdf5r)
#install.packages("Matrix")
library(Matrix)
# install.packages("data.table")
library(data.table)
#------------------------------------------------------------------------------#
# Perform hierarchical clustering and return the events
#------------------------------------------------------------------------------#
get_gene_events <- function(gene_df) {
# Dissimilarity matrix based on euclidean distance
d <- dist(gene_df, method = "euclidean")
# Hierarchical clustering using median linkage
hc1 <- hclust(d, method = "median" )
# Generate dendrogram
dend <- as.dendrogram(hc1)
# Return all the nodes in the tree with corresponding samples
events <- partition_leaves(dend)
return(events)
}
# Load the dataset (list of Seurat objects)
pt27_ne_nested <- readRDS("/Users/M296398/Desktop/angad/pt27_ne_nested.rds")
print(pt27_ne_nested)
length(pt27_ne_nested) # he took 16 clusters -- these have at least 50 cells from CE and NE
# Construct the full path to the "CE_genes" folder on your desktop
# TODO change this to make folder if it doesn't exist, by date
desktop_path <- file.path(Sys.getenv("HOME"), "Desktop", "pt27_int_NE_genes")
desktop_path
# For each gene we make the tree
print(names(pt27_ne_nested))
pt27_ne_nested
type(pt27_ne_nested)
class(pt27_ne_nested)
pt27_ne_nested[[10]]
pt27_ne_nested[10]
# For each gene we make the tree
print(names(pt27_ne_nested)) # named by number of clusters
for (cluster_name in names(pt27_ne_nested)) {
# print(cluster_name) # these are the number of clusters per bootstrap
cluster_objects <- pt27_ne_nested[[cluster_name]]
print(cluster_objects) # 10 cluster objects, each of class Seurat
}
for (cluster_name in names(pt27_ne_nested)) {
clus_obj_copy <- pt27_ne_nested$cluster_name
print(clus_obj_copy)
}
for (cluster_name in names(pt27_ne_nested)) {
# print(cluster_name) # these are the number of clusters per bootstrap
cluster_objects <- pt27_ne_nested[[cluster_name]]
print(cluster_objects) # 10 cluster objects, each of class Seurat
print(class(cluster_objects[[1]])) # they are all lists...to access the obj have to index in
paste("length:", length(cluster_objects))
# 12697 features = genes
}
for (cluster in pt27_ne_nested) {
print(cluster)
}
# Set working directory
# setwd("C:\\Users\\m296398\\Desktop\\medicare_hos\\ascii_to_csv")
setwd("/Users/m296398/Desktop/medicare_hos/ascii_to_csv")
# Define the file path to the fixed-width ASCII file.
# ascii_file <- "C11B_PUF.TXT"
# ascii_file <- "C12B_PUF.TXT"
# ascii_file <- "C13B_PUF.TXT"
ascii_file <- "C14B_PUF.TXT"
# List of column names for converted file (CSV fields)
# TODO: there is a more elegant way to do this -- read from CSV file
# or sumthin and put into a vector but im too tired rn
new_fields <- c(
"CASE_ID", "AGE", "RACE", "GENDER", "MRSTAT", "EDUC", "BMICAT",
"General_Health", "Mod_Activity", "Stairs", "Phys_Amount_Limit",
"Phys_Type_Limit", "Emo_Amount_Limit", "Emo_Carefulness", "Pain_Work",
"Peace", "Energy", "Down", "Social_Interference", "Bathing",
"Dressing", "Eating", "Chairs", "Walking", "Toilet", "Hypertension",
"ANG_CAD", "CHF", "MI", "Heart_Other", "Stroke", "COPD", "IBD",
"Arth_Hip_Knee", "Arth_Hand_Wr", "Osteo", "Sciatica", "Diabetes",
"Cancer", "Smoking_Status", "Who_Comp", "Survey_Disp", "Region"
) # length = 43
# checks to see how many records (rows) there are in the original ASCII file
all_lines <- readLines(ascii_file)
length(all_lines) # 240682 for 2008, 298040 for 2009, 347945 for 2010
# Define the indices and column names
start_indices <- c(
1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,
31, 32, 33, 34, 35, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79,
91, 92, 105
) # Starting indices for substrings
end_indices <- c(
9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,
31, 32, 33, 34, 35, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79,
91, 94, 106
) # Ending indices for substrings
# Initialize an empty data frame
output_df <- data.frame(matrix(ncol = length(new_fields), nrow = length(all_lines)))
colnames(output_df) <- new_fields
# Loop through each line to extract values based on indices
for (i in seq_along(all_lines)) {
print(i)
for (j in seq_along(start_indices)) {
# Extract substring and assign to the appropriate column
output_df[i, new_fields[j]] <- substr(all_lines[i], start_indices[j], end_indices[j])
}
}
# Loop through each line to extract values based on indices
for (i in seq_along(all_lines)) {
print(i)
for (j in seq_along(start_indices)) {
# Extract substring and assign to the appropriate column
output_df[i, new_fields[j]] <- substr(all_lines[i], start_indices[j], end_indices[j])
}
}
# Export the DataFrame into a CSV file and name the file
# this will also take a sec
# row.names false to not copy over record (row) number
# write.csv(output_df, file = "C11_2008_PUF.csv", row.names = FALSE)
# write.csv(output_df, file = "C12_2009_PUF.csv", row.names = FALSE)
# write.csv(output_df, file = "C13_2010_PUF.csv", row.names = FALSE)
write.csv(output_df, file = "C14_2011_PUF.csv", row.names = FALSE)
gc()
# Define the file path to the fixed-width ASCII file.
# ascii_file <- "C11B_PUF.TXT"
# ascii_file <- "C12B_PUF.TXT"
# ascii_file <- "C13B_PUF.TXT"
# ascii_file <- "C14B_PUF.TXT"
ascii_file <- "C15B_PUF.TXT"
# List of column names for converted file (CSV fields)
# TODO: there is a more elegant way to do this -- read from CSV file
# or sumthin and put into a vector but im too tired rn
new_fields <- c(
"CASE_ID", "AGE", "RACE", "GENDER", "MRSTAT", "EDUC", "BMICAT",
"General_Health", "Mod_Activity", "Stairs", "Phys_Amount_Limit",
"Phys_Type_Limit", "Emo_Amount_Limit", "Emo_Carefulness", "Pain_Work",
"Peace", "Energy", "Down", "Social_Interference", "Bathing",
"Dressing", "Eating", "Chairs", "Walking", "Toilet", "Hypertension",
"ANG_CAD", "CHF", "MI", "Heart_Other", "Stroke", "COPD", "IBD",
"Arth_Hip_Knee", "Arth_Hand_Wr", "Osteo", "Sciatica", "Diabetes",
"Cancer", "Smoking_Status", "Who_Comp", "Survey_Disp", "Region"
) # length = 43
# checks to see how many records (rows) there are in the original ASCII file
all_lines <- readLines(ascii_file)
length(all_lines) # 240682 for 2008, 298040 for 2009, 347945 for 2010
# Define the indices and column names
start_indices <- c(
1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,
31, 32, 33, 34, 35, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79,
91, 92, 105
) # Starting indices for substrings
end_indices <- c(
9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,
31, 32, 33, 34, 35, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 79,
91, 94, 106
) # Ending indices for substrings
# Initialize an empty data frame
output_df <- data.frame(matrix(ncol = length(new_fields), nrow = length(all_lines)))
colnames(output_df) <- new_fields
# Loop through each line to extract values based on indices
for (i in seq_along(all_lines)) {
print(i)
for (j in seq_along(start_indices)) {
# Extract substring and assign to the appropriate column
output_df[i, new_fields[j]] <- substr(all_lines[i], start_indices[j], end_indices[j])
}
}
# Loop through each line to extract values based on indices
for (i in seq_along(all_lines)) {
print(i)
for (j in seq_along(start_indices)) {
# Extract substring and assign to the appropriate column
output_df[i, new_fields[j]] <- substr(all_lines[i], start_indices[j], end_indices[j])
}
}
# Export the DataFrame into a CSV file and name the file
# this will also take a sec
# row.names false to not copy over record (row) number
# write.csv(output_df, file = "C11_2008_PUF.csv", row.names = FALSE)
# write.csv(output_df, file = "C12_2009_PUF.csv", row.names = FALSE)
# write.csv(output_df, file = "C13_2010_PUF.csv", row.names = FALSE)
# write.csv(output_df, file = "C14_2011_PUF.csv", row.names = FALSE)
write.csv(output_df, file = "C15_2012_PUF.csv", row.names = FALSE)
gc()
# Set working directory
# setwd("C:\\Users\\m296398\\Desktop\\medicare_hos\\ascii_to_csv")
setwd("/Users/m296398/Desktop/medicare_hos/ascii_to_csv")
# Define the file path to the fixed-width ASCII file.
# ascii_file <- "C18B_PUF.TXT"
ascii_file <- "C19B_PUF.TXT"
# List of column names for converted file (CSV fields)
# TODO: there is a more elegant way to do this -- read from CSV file
# or sumthin and put into a vector but im too tired rn
new_fields <- c(
"CASE_ID", "AGE", "RACE", "GENDER", "MRSTAT", "EDUC", "BMICAT",
"General_Health", "Mod_Activity", "Stairs", "Phys_Amount_Limit",
"Phys_Type_Limit", "Emo_Amount_Limit", "Emo_Carefulness", "Pain_Work",
"Peace", "Energy", "Down", "Social_Interference", "Bathing",
"Dressing", "Eating", "Chairs", "Walking", "Toilet", "Hypertension",
"ANG_CAD", "CHF", "MI", "Heart_Other", "Stroke", "COPD", "IBD",
"Arth_Hip_Knee", "Arth_Hand_Wr", "Osteo", "Sciatica", "Diabetes",
"Cancer", "Smoking_Status", "Who_Comp", "Survey_Disp", "Region"
) # length = 43
# checks to see how many records (rows) there are in the original ASCII file
all_lines <- readLines(ascii_file)
length(all_lines) # 123053 for 2006
length(all_lines) # 260608 for 2016
# Define the indices and column names
start_indices <- c(
1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,
31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 77,
92, 93, 106
) # Starting indices for substrings
end_indices <- c(
9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,
31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 77,
92, 95, 107
) # Ending indices for substrings
# Initialize an empty data frame
output_df <- data.frame(matrix(ncol = length(new_fields), nrow = length(all_lines)))
colnames(output_df) <- new_fields
# Loop through each line to extract values based on indices
for (i in seq_along(all_lines)) {
print(i)
for (j in seq_along(start_indices)) {
# Extract substring and assign to the appropriate column
output_df[i, new_fields[j]] <- substr(all_lines[i], start_indices[j], end_indices[j])
}
}
# Loop through each line to extract values based on indices
for (i in seq_along(all_lines)) {
print(i)
for (j in seq_along(start_indices)) {
# Extract substring and assign to the appropriate column
output_df[i, new_fields[j]] <- substr(all_lines[i], start_indices[j], end_indices[j])
}
}
# Export the DataFrame into a CSV file and name the file
# this will also take a sec
# row.names false to not copy over record (row) number
# write.csv(output_df, file = "C18_2015_PUF.csv", row.names = FALSE)
write.csv(output_df, file = "C19_2016_PUF.csv", row.names = FALSE)
# Define the file path to the fixed-width ASCII file.
# ascii_file <- "C18B_PUF.TXT"
# ascii_file <- "C19B_PUF.TXT"
ascii_file <- "C20B_PUF.TXT"
# List of column names for converted file (CSV fields)
# TODO: there is a more elegant way to do this -- read from CSV file
# or sumthin and put into a vector but im too tired rn
new_fields <- c(
"CASE_ID", "AGE", "RACE", "GENDER", "MRSTAT", "EDUC", "BMICAT",
"General_Health", "Mod_Activity", "Stairs", "Phys_Amount_Limit",
"Phys_Type_Limit", "Emo_Amount_Limit", "Emo_Carefulness", "Pain_Work",
"Peace", "Energy", "Down", "Social_Interference", "Bathing",
"Dressing", "Eating", "Chairs", "Walking", "Toilet", "Hypertension",
"ANG_CAD", "CHF", "MI", "Heart_Other", "Stroke", "COPD", "IBD",
"Arth_Hip_Knee", "Arth_Hand_Wr", "Osteo", "Sciatica", "Diabetes",
"Cancer", "Smoking_Status", "Who_Comp", "Survey_Disp", "Region"
) # length = 43
# checks to see how many records (rows) there are in the original ASCII file
all_lines <- readLines(ascii_file)
length(all_lines) # 260608 for 2016
length(all_lines) # 260608 for 2016, 256652 for 2017
# Define the indices and column names
start_indices <- c(
1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,
31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 77,
92, 93, 106
) # Starting indices for substrings
end_indices <- c(
9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,
31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 77,
92, 95, 107
) # Ending indices for substrings
# Initialize an empty data frame
output_df <- data.frame(matrix(ncol = length(new_fields), nrow = length(all_lines)))
colnames(output_df) <- new_fields
# Loop through each line to extract values based on indices
for (i in seq_along(all_lines)) {
print(i)
for (j in seq_along(start_indices)) {
# Extract substring and assign to the appropriate column
output_df[i, new_fields[j]] <- substr(all_lines[i], start_indices[j], end_indices[j])
}
}
# Loop through each line to extract values based on indices
for (i in seq_along(all_lines)) {
print(i)
for (j in seq_along(start_indices)) {
# Extract substring and assign to the appropriate column
output_df[i, new_fields[j]] <- substr(all_lines[i], start_indices[j], end_indices[j])
}
}
# Export the DataFrame into a CSV file and name the file
# this will also take a sec
# row.names false to not copy over record (row) number
# write.csv(output_df, file = "C18_2015_PUF.csv", row.names = FALSE)
# write.csv(output_df, file = "C19_2016_PUF.csv", row.names = FALSE)
write.csv(output_df, file = "C20_2017_PUF.csv", row.names = FALSE)
# Define the file path to the fixed-width ASCII file.
# ascii_file <- "C18B_PUF.TXT"
# ascii_file <- "C19B_PUF.TXT"
# ascii_file <- "C20B_PUF.TXT"
ascii_file <- "C21B_PUF.TXT"
# List of column names for converted file (CSV fields)
# TODO: there is a more elegant way to do this -- read from CSV file
# or sumthin and put into a vector but im too tired rn
new_fields <- c(
"CASE_ID", "AGE", "RACE", "GENDER", "MRSTAT", "EDUC", "BMICAT",
"General_Health", "Mod_Activity", "Stairs", "Phys_Amount_Limit",
"Phys_Type_Limit", "Emo_Amount_Limit", "Emo_Carefulness", "Pain_Work",
"Peace", "Energy", "Down", "Social_Interference", "Bathing",
"Dressing", "Eating", "Chairs", "Walking", "Toilet", "Hypertension",
"ANG_CAD", "CHF", "MI", "Heart_Other", "Stroke", "COPD", "IBD",
"Arth_Hip_Knee", "Arth_Hand_Wr", "Osteo", "Sciatica", "Diabetes",
"Cancer", "Smoking_Status", "Who_Comp", "Survey_Disp", "Region"
) # length = 43
# checks to see how many records (rows) there are in the original ASCII file
all_lines <- readLines(ascii_file)
length(all_lines) # 260608 for 2016, 256652 for 2017
length(all_lines) # 260608 for 2016, 256652 for 2017, 239071 for 2018
# Define the indices and column names
start_indices <- c(
1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,
31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 77,
92, 93, 106
) # Starting indices for substrings
end_indices <- c(
9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,
31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 77,
92, 95, 107
) # Ending indices for substrings
# Initialize an empty data frame
output_df <- data.frame(matrix(ncol = length(new_fields), nrow = length(all_lines)))
colnames(output_df) <- new_fields
# Loop through each line to extract values based on indices
for (i in seq_along(all_lines)) {
print(i)
for (j in seq_along(start_indices)) {
# Extract substring and assign to the appropriate column
output_df[i, new_fields[j]] <- substr(all_lines[i], start_indices[j], end_indices[j])
}
}
# Loop through each line to extract values based on indices
for (i in seq_along(all_lines)) {
print(i)
for (j in seq_along(start_indices)) {
# Extract substring and assign to the appropriate column
output_df[i, new_fields[j]] <- substr(all_lines[i], start_indices[j], end_indices[j])
}
}
# Export the DataFrame into a CSV file and name the file
# this will also take a sec
# row.names false to not copy over record (row) number
# write.csv(output_df, file = "C18_2015_PUF.csv", row.names = FALSE)
# write.csv(output_df, file = "C19_2016_PUF.csv", row.names = FALSE)
# write.csv(output_df, file = "C20_2017_PUF.csv", row.names = FALSE)
write.csv(output_df, file = "C21_2018_PUF.csv", row.names = FALSE)
# Define the file path to the fixed-width ASCII file.
# ascii_file <- "C18B_PUF.TXT"
# ascii_file <- "C19B_PUF.TXT"
# ascii_file <- "C20B_PUF.TXT"
# ascii_file <- "C21B_PUF.TXT"
ascii_file <- "C22B_PUF.TXT"
# List of column names for converted file (CSV fields)
# TODO: there is a more elegant way to do this -- read from CSV file
# or sumthin and put into a vector but im too tired rn
new_fields <- c(
"CASE_ID", "AGE", "RACE", "GENDER", "MRSTAT", "EDUC", "BMICAT",
"General_Health", "Mod_Activity", "Stairs", "Phys_Amount_Limit",
"Phys_Type_Limit", "Emo_Amount_Limit", "Emo_Carefulness", "Pain_Work",
"Peace", "Energy", "Down", "Social_Interference", "Bathing",
"Dressing", "Eating", "Chairs", "Walking", "Toilet", "Hypertension",
"ANG_CAD", "CHF", "MI", "Heart_Other", "Stroke", "COPD", "IBD",
"Arth_Hip_Knee", "Arth_Hand_Wr", "Osteo", "Sciatica", "Diabetes",
"Cancer", "Smoking_Status", "Who_Comp", "Survey_Disp", "Region"
) # length = 43
# checks to see how many records (rows) there are in the original ASCII file
all_lines <- readLines(ascii_file)
length(all_lines) # 260608 for 2016, 256652 for 2017, 239071 for 2018
# Define the indices and column names
start_indices <- c(
1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,
31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 77,
92, 93, 106
) # Starting indices for substrings
end_indices <- c(
9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30,
31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 77,
92, 95, 107
) # Ending indices for substrings
# Initialize an empty data frame
output_df <- data.frame(matrix(ncol = length(new_fields), nrow = length(all_lines)))
colnames(output_df) <- new_fields
# Loop through each line to extract values based on indices
for (i in seq_along(all_lines)) {
print(i)
for (j in seq_along(start_indices)) {
# Extract substring and assign to the appropriate column
output_df[i, new_fields[j]] <- substr(all_lines[i], start_indices[j], end_indices[j])
}
}
# Loop through each line to extract values based on indices
for (i in seq_along(all_lines)) {
print(i)
for (j in seq_along(start_indices)) {
# Extract substring and assign to the appropriate column
output_df[i, new_fields[j]] <- substr(all_lines[i], start_indices[j], end_indices[j])
}
}
# Export the DataFrame into a CSV file and name the file
# this will also take a sec
# row.names false to not copy over record (row) number
# write.csv(output_df, file = "C18_2015_PUF.csv", row.names = FALSE)
# write.csv(output_df, file = "C19_2016_PUF.csv", row.names = FALSE)
# write.csv(output_df, file = "C20_2017_PUF.csv", row.names = FALSE)
# write.csv(output_df, file = "C21_2018_PUF.csv", row.names = FALSE)
write.csv(output_df, file = "C22_2019_PUF.csv", row.names = FALSE)
